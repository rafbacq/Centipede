import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class GameScreenTest {
    private static final int PANEL_WIDTH = 1936;
    private static final int PANEL_HEIGHT = 1056;
    private static final int MOVE_AMOUNT = 5;
    private static int x = PANEL_WIDTH / 2; // Initial x position of the player
    private static int y = PANEL_HEIGHT / 2 + 300; // Initial y position of the player
    public static JPanel innerFrame;
    // List to store active bullets
    private static List<Point> bullets = new ArrayList<>();
    private static final int BULLET_SIZE = 5; // Adjust bullet size
    private static final int BULLET_SPEED = 10;
    public static ArrayList<Integer> mushroomX;
    public static ArrayList<Integer> mushroomY;
    private static ArrayList<String> mushroomStatus; // Store status of each mushroom
    private static String[][] centipedeMap;

    private static Graphics2D g2d;

    private static List<CentipedeBody> centipedes = new ArrayList<>();
    private static Spider spider;

    public static void main(String[] args) {
        mushroomX = new ArrayList<>();
        mushroomY = new ArrayList<>();
        mushroomStatus = new ArrayList<>();
        centipedeMap = new String[1936][1056];
        for (int i = 0; i < 50; i++) {
            mushroomX.add((int) (Math.random() * (PANEL_WIDTH - 6))); // Random x within the first half of the panel
            mushroomY.add(((int) (Math.random() * 30 + 1) * 20) + 94);
            mushroomStatus.add("Full"); // Initially, all mushrooms are full
        }
        createAndShowGUI();
    }

    private static void createAndShowGUI() {
        JFrame outerFrame = new JFrame("Outer Frame");
        outerFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        outerFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        outerFrame.setVisible(true);
        outerFrame.setLayout(new BorderLayout());
        innerFrame = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g2d = (Graphics2D) g.create();
                int shadowHeight = 5; // Height of the shadow
                int marginSize = getHeight() / 11; // Size of the margin
                // Draw top shadow
                g2d.setColor(Color.GREEN);
                g2d.fillRect(0, marginSize - shadowHeight, getWidth(), shadowHeight);
                // Draw bottom shadow
                g2d.fillRect(0, getHeight() - marginSize, getWidth(), shadowHeight);
                // Draw player
                ImageIcon playerIcon = new ImageIcon(getClass().getResource("blackCursor.png"));
                Image playerImage = playerIcon.getImage();
                g2d.drawImage(playerImage, x, y, this);
                // Draw mushrooms
                for (int i = 0; i < mushroomX.size(); i++) {
                    int mx = mushroomX.get(i);
                    int my = mushroomY.get(i);
                    String status = mushroomStatus.get(i);
                    if (status.equals("Full")) {
                        loadMushroom(mx, my, "Full", g2d);
                    }
                }
                // Draw bullets
                g2d.setColor(Color.BLUE);
                for (Point bullet : bullets) {
                    g2d.fillRect(bullet.x, bullet.y, BULLET_SIZE, BULLET_SIZE);
                }
                // Draw centipedes
                for (CentipedeBody centipede : centipedes) {
                    centipede.drawCentipede(g2d);
                }
                // Draw spider
                if (spider != null) {
                    spider.draw(g2d);
                }
                g2d.dispose();
            }

            private void loadMushroom(int x, int y, String status, Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                switch (status) {
                    case "Full":
                        ImageIcon stage0Mushroom = new ImageIcon(getClass().getResource("Stage0Mushroom.png")); //mushroom is 19 by 19 px
                        Image stage0MushroomImage = stage0Mushroom.getImage();
                        g2d.drawImage(stage0MushroomImage, x, y, this);
                        break;
                }
            }
        };
        innerFrame.setBackground(Color.BLACK);
        innerFrame.setFocusable(true); // Allow panel to receive focus
        innerFrame.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                switch (keyCode) {
                    case KeyEvent.VK_LEFT:
                        if (x - 5 * MOVE_AMOUNT >= 0)
                            x -= 5 * MOVE_AMOUNT;
                        break;
                    case KeyEvent.VK_RIGHT:
                        if (x + 5 * MOVE_AMOUNT <= PANEL_WIDTH)
                            x += 5 * MOVE_AMOUNT;
                        break;
                    case KeyEvent.VK_UP:
                        if (y - 5 * MOVE_AMOUNT >= (PANEL_HEIGHT / 11 + 5))
                            y -= 5 * MOVE_AMOUNT;
                        break;
                    case KeyEvent.VK_DOWN:
                        if (y + 5 * MOVE_AMOUNT <= (PANEL_HEIGHT - (PANEL_HEIGHT / 11 + 5)))
                            y += 5 * MOVE_AMOUNT;
                        break;
                    case KeyEvent.VK_SPACE: // Space bar pressed
                        // Add a new bullet position to the list
                        bullets.add(new Point(x + 22, y - 5)); // Adjust initial position of the bullet
                        break;
                }
                innerFrame.repaint(); // Repaint panel after moving or shooting
            }

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });

        // Initialize centipedes
        centipedes.add(new CentipedeBody(0, 87, 20, true));
        // Initialize spider
        spider = new Spider((int) (Math.random() * PANEL_WIDTH), PANEL_HEIGHT / 2 + 300, 15, Color.GREEN, 6, 6);

        // Bullet animation thread
        new Thread(() -> {
            while (true) {
                List<Point> bulletsToRemove = new ArrayList<>();
                Iterator<Point> bulletIterator = bullets.iterator();
                while (bulletIterator.hasNext()) {
                    Point bullet = bulletIterator.next();
                    bullet.y -= BULLET_SPEED; // Move bullets upwards

                    // Check for collision with mushrooms
                    for (int i = 0; i < mushroomX.size(); i++) {
                        int mx = mushroomX.get(i);
                        int my = mushroomY.get(i);
                        String status = mushroomStatus.get(i);
                        if (status.equals("Full") && bullet.x >= mx && bullet.x <= mx + 32 && bullet.y >= my && bullet.y <= my + 32) {
                            // Bullet hit a mushroom
                            mushroomX.remove(i);
                            mushroomY.remove(i);
                            mushroomStatus.remove(i);
                            bulletsToRemove.add(bullet); // Mark the bullet for removal
                            break; // Exit the loop after hitting one mushroom
                        }
                    }

                    // Check for collision with centipede segments
                    for (CentipedeBody centipede : centipedes) {
                        for (int i = 0; i < centipede.getLength(); i++) {
                            if (bullet.x >= centipede.x[i] && bullet.x <= centipede.x[i] + CentipedeBody.UNIT_SIZE &&
                                    bullet.y >= centipede.y[i] && bullet.y <= centipede.y[i] + CentipedeBody.UNIT_SIZE) {
                                // Bullet hit a centipede segment
                                bulletsToRemove.add(bullet); // Mark the bullet for removal

                                // Place a mushroom at the hit location
                                mushroomX.add(centipede.x[i]);
                                mushroomY.add(centipede.y[i]);
                                mushroomStatus.add("Full");

                                // Create a new centipede with the remaining segments
                                if (i < centipede.getLength() - 1) {
                                    CentipedeBody newCentipede = new CentipedeBody(centipede.x[i + 1], centipede.y[i + 1], centipede.getLength() - i - 1, centipede.velX[0] < 0);
                                    newCentipede.moveDownAndSwitchDirection();
                                    centipedes.add(newCentipede);
                                }
                                centipede.shorten(i);
                                break; // Exit the loop after hitting one segment
                            }
                        }
                    }
                }

                // Remove bullets that have hit something
                bullets.removeAll(bulletsToRemove);

                innerFrame.repaint(); // Repaint panel after moving bullets
                try {
                    Thread.sleep(10); // Adjust speed of bullets
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }).start();

        // Spider movement thread
        new Thread(() -> {
            while (true) {
                spider.update();
                innerFrame.repaint(); // Repaint panel after moving the spider
                // Check for collision between spider and player
                if (spider.posX < x + 32 && spider.posX + spider.size > x && spider.posY < y + 32 && spider.posY + spider.size > y) {
                    JOptionPane.showMessageDialog(innerFrame, "You lose");
                    System.exit(0); // Exit the game
                }
                try {
                    Thread.sleep(10); // Adjust speed of the spider
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }).start();

        outerFrame.add(innerFrame, BorderLayout.CENTER);
        outerFrame.setVisible(true);
        innerFrame.requestFocusInWindow();
    }

    public static class Spider {
        private int posX, posY, size;
        private Color color;
        private int vx, vy;
        private int stepsRemaining;
        private int stage; // 0 for "M" shape, 1 for vertical movement

        public Spider(int posX, int posY, int size, Color color, int vx, int vy) {
            this.posX = posX;
            this.posY = posY;
            this.size = size;
            this.color = color;
            this.vx = vx;
            this.vy = vy;
            this.stepsRemaining = (int) (Math.random() * 50) + 5;
            this.stage = 0;
        }

        public void update() {
            if (stage == 0) {
                if (stepsRemaining > 0) {
                    posX += vx;
                    posY -= vy;
                    stepsRemaining--;
                } else {
                    stage = 1;
                    stepsRemaining = (int) (Math.random() * 50) + 5;
                }
            } else if (stage == 1) {
                if (stepsRemaining > 0) {
                    // Move vertically up
                    posY -= vy;
                    stepsRemaining--;
                } else {
                    // If in the top half of the frame, bounce back towards the bottom
                    if (posY < PANEL_HEIGHT / 2) {
                        vy = -vy;
                    }
                    stage = 2; // Move to diagonally down stage
                    stepsRemaining = (int) (Math.random() * 50) + 5;
                }
            } else {
                if (stepsRemaining > 0) {
                    // Move diagonally down
                    posX += vx;
                    posY += vy;
                    stepsRemaining--;
                } else {
                    // Change stage and reset steps
                    stage = 0; // Move back to "M" shape stage
                    stepsRemaining = (int) (Math.random() * 50) + 5; // Random number of steps for next movement
                }
            }

            // Bounce off walls
            if (posX <= 0 || posX + size >= PANEL_WIDTH) {
                vx = -vx;
            }
            if (posY <= PANEL_HEIGHT / 2 || posY + size >= 922) {
                vy = -vy;
            }
        }

        public void draw(Graphics g) {
            g.setColor(Color.BLACK);
            g.fillOval(posX - 5, posY - 5, size + 10, size + 10);

            g.setColor(color);
            g.fillOval(posX, posY, size, size);
            //left side
            g.drawLine(posX + 2, posY, posX - 3, posY - 3);
            g.drawLine(posX, posY + 5, posX - 5, posY + 5);
            g.drawLine(posX, posY + 9, posX - 5, posY + 9);
            g.drawLine(posX + 2, posY + 12, posX - 3, posY + 15);

            //right side
            g.drawLine(posX + 12, posY, posX + 17, posY - 3);
            g.drawLine(posX + 15, posY + 5, posX + 19, posY + 5);
            g.drawLine(posX + 15, posY + 9, posX + 19, posY + 9);
            g.drawLine(posX + 12, posY + 12, posX + 17, posY + 15);
        }
    }
}
